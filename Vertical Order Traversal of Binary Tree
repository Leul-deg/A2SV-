# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        hashmap  = {}
        def vertical(node , r=0 , c=0 ):
            if not node:
                return 
            # print(node.val)
            if (c,r) not in hashmap:
                hashmap[(c,r)] = []
            
            vertical(node.left , r + 1 , c - 1)
            vertical(node.right , r + 1 , c+1)
            hashmap[(c,r)].append(node.val)
            
            
        vertical(root)
        
        pairs = list(hashmap.keys())
        
        pairs.sort()
        res = []
        r = 0 
        while r < len(pairs):
            ans = []
            cur = pairs[r][0]
            while r<len(pairs) and  cur == pairs[r][0]:
                ans = ans + sorted(hashmap[pairs[r]])
                r += 1
            res.append(ans)
        
        return res
        res = []
        
        for key in new_pairs:
            # c , r = key
            res.append(sorted(hashmap[key]))
        
        return res
            
        
