class Solution:
    def reversePairs(self, nums: List[int]) -> int:
        
        res = 0
        def mergeSort(l= 0  , r  = len(nums)-1 ):
            nonlocal res
            if l == r:
                return [nums[l]]
            
            mid = (l + r) //2
            left = mergeSort(l , mid)
            right = mergeSort(mid + 1  , r)
            
            #count
            j = 0 
            for i in range(len(left)):
                while j < len(right) and  left[i] > 2*right[j]:
                    j += 1
                
                res += j
            
            
            #merging 
            l_p , r_p = 0 ,  0 
            merged = [ ]
            while l_p < len(left) and r_p < len(right):
                if left[l_p] < right[r_p]:
                    merged.append(left[l_p])
                    l_p += 1
                else:
                    merged.append(right[r_p])
                    r_p += 1
            
            merged = merged + left[l_p:]
            merged = merged + right[r_p:]
            return merged 
            
            
        
        
        
        
        mergeSort()
        return res
