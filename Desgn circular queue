class MyCircularQueue:

    def __init__(self, k: int):
        self.k = k 
        self.size =0 
        self.arr = [""]*k
        self.front = 0
        

    def enQueue(self, value: int) -> bool:
        # print(self.arr)
        if self.size == self.k:
            return False
        
        self.arr[(self.size + self.front)%(self.k)] = value 
        self.size += 1
        return True
        

    def deQueue(self) -> bool:
        # print(self.arr)
        if self.size == 0:
            return False
        
        self.size -= 1
        self.front = (self.front + 1) % (self.k)
        return True

    def Front(self) -> int:
        # print(self.arr)
        if self.size == 0:
            return -1
        return self.arr[self.front]

    def Rear(self) -> int:
        if self.size == 0:
            return -1
        # print(self.arr)
        return self.arr[(self.front + self.size-1 )%(self.k)]

    def isEmpty(self) -> bool:
        
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.k


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
