# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reorderList(self, head: Optional[ListNode]) -> None:
        """
        Do not return anything, modify head in-place instead.
        """
        def reverse(head):
                if not head or not head.next:
                    return head
                p = reverse(head.next)
                head.next.next = head
                head.next = None
                return p

        #Finding the middle
        slow, fast = head,head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        left , right = head , reverse(slow)
        print(left.val , right.val)
                
        while right and left:
            tmp1, tmp2 = left.next , right.next
            left.next = right
            right.next = tmp1
            left = tmp1
            right = tmp2
        return head
